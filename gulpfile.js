var { gulp, src, dest, watch, series, parallel } = require('gulp');
var del = require('del');
var fs = require('fs');
var path = require('path');

var concat = require('gulp-concat');
var header = require('gulp-header');
var footer = require('gulp-footer');
var typescript = require('gulp-typescript');
var preserveWhitespace = require('gulp-preserve-typescript-whitespace');
var prettier = require('gulp-prettier');

// Configuration
const outputFileName = 'Wanikani Item Tagger.user.js';
const outputCSSFile = 'userscript.build.css';
const buildFolder = 'output/';
const buildJsFolder = 'output/js/';
const releaseFolder = 'dist/';

function clean() {
  return del(`${buildFolder}/*`);
}

function buildTypeScript(){
  var tsProject = typescript.createProject('tsconfig.json');

  return src([
    'src/**/*.ts'
  ])
  .pipe(preserveWhitespace.saveWhitespace())
  .pipe(tsProject())
  .js
  .pipe(preserveWhitespace.restoreWhitespace())
  .pipe(prettier({
    tabWidth: 2,
    semi: true
  }))
  .pipe(dest(buildJsFolder));
}

function buildUserscript() {
  var userscriptHeader = fs.readFileSync('output/js/index.js');
  var userscriptFooter = fs.readFileSync('output/js/footer.js');
  var userscriptCssRaw = fs.readFileSync(`output/${outputCSSFile}`);
  var userscruptCssJsFooter = `var userscriptCss = \`\n${userscriptCssRaw}\n\`;`;

  var headerText = [
    userscriptHeader,
    '',
    ''
  ].join('\n');

  var footerText = [
    '',
    '',
    userscruptCssJsFooter,
    userscriptFooter
  ].join('\n');

  return src([
    'output/js/**/*.js',
    '!output/js/footer.js',
    '!output/js/index.js'
  ])
    .pipe(concat(outputFileName, { newLine: '\r\n\r\n' }))
    .pipe(header(headerText))
    .pipe(footer(footerText))
    .pipe(dest(buildFolder));
}

function buildCss() {
  var autogeneratedHeaderComment = fs.readFileSync('gulp/css-autogen-header.css');

  // If production, no need to add this header
  autogeneratedHeaderComment = false ? '' : autogeneratedHeaderComment;

  return src([
    'src/css/**/*.css'
  ])
    .pipe(concat(outputCSSFile, { newLine: '\r\n\r\n' }))
    .pipe(header(autogeneratedHeaderComment))
    .pipe(dest(buildFolder));
}

var build = series(buildCss, buildTypeScript, buildUserscript);

exports.clean = clean;
exports.build = series(clean, build);
exports.buildTypeScript = buildTypeScript;

exports.default = exports.build;
