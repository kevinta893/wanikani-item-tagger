var { gulp, src, dest, watch, series, parallel } = require('gulp');
var del = require('del');   //gulp-clean is depreciated
var fs = require('fs');
var path = require('path');

var concat = require('gulp-concat');
var header = require('gulp-header');
var footer = require('gulp-footer');
var flatten = require('gulp-flatten');
var typescript = require('gulp-typescript');
var preserveWhitespace = require('gulp-preserve-typescript-whitespace');
var prettier = require('gulp-prettier');

// Configuration
var productionBuild = false;
const outputFileName = 'Wanikani Item Tagger.user.js';
const outputCSSFile = 'userscript.build.css';
const buildFolder = 'output';
const buildJsFolder = 'output/js';
const releaseFolder = 'dist';
const readmeFilePath = 'README.md';
const licenseFilePath = 'LICENSE';


function clean() {
  return del(`${buildFolder}/*`);
}

function buildTypeScript() {
  var tsProject = typescript.createProject('tsconfig.json');

  return src([
    'src/**/*.ts'
  ])
    .pipe(preserveWhitespace.saveWhitespace())
    .pipe(tsProject())
    .js
    .pipe(preserveWhitespace.restoreWhitespace())
    .pipe(prettier({
      tabWidth: 2,
      semi: true
    }))
    .pipe(dest(buildJsFolder));
}

function buildUserscript() {
  var userscriptHeader = fs.readFileSync(`${buildJsFolder}/index.js`);
  var userscriptFooter = fs.readFileSync(`${buildJsFolder}/footer.js`);
  var userscriptCssRaw = fs.readFileSync(`${buildFolder}/${outputCSSFile}`);
  var userscruptCssJsFooter = `var userscriptCss = \`\n${userscriptCssRaw}\n\`;`;

  var headerText = [
    userscriptHeader,
    '',
    ''
  ].join('\n');

  var footerText = [
    '',
    '',
    userscruptCssJsFooter,
    userscriptFooter
  ].join('\n');

  return src([
    `${buildJsFolder}/**/*.js`,
    `!${buildJsFolder}/footer.js`,
    `!${buildJsFolder}/index.js`
  ])
    .pipe(concat(outputFileName, { newLine: '\r\n\r\n' }))
    .pipe(header(headerText))
    .pipe(footer(footerText))
    .pipe(dest(buildFolder));
}

function buildCss() {
  var autogeneratedHeaderComment = fs.readFileSync('gulp/css-autogen-header.css');

  // If production, no need to add this header
  autogeneratedHeaderComment = productionBuild ? '' : autogeneratedHeaderComment;

  return src([
    'src/css/**/*.css'
  ])
    .pipe(concat(outputCSSFile, { newLine: '\r\n\r\n' }))
    .pipe(header(autogeneratedHeaderComment))
    .pipe(dest(buildFolder));
}

function setProductionBuild(cb) {
  productionBuild = true;
  cb();
}

function cleanRelease() {
  return del(`${releaseFolder}/*`);
}

function exportRelease() {
  return src([
    `${buildFolder}/${outputFileName}`,
    readmeFilePath,
    licenseFilePath
  ])
    .pipe(flatten())
    .pipe(dest(releaseFolder));
}

var build = series(
  clean,
  buildCss,
  buildTypeScript,
  buildUserscript
);
var buildRelease = series(
  setProductionBuild,
  cleanRelease,
  build,
  exportRelease
);

exports.clean = clean;
exports.build = build;
exports.buildTypeScript = buildTypeScript;

exports.cleanRelease = cleanRelease;
exports.buildRelease = buildRelease;

exports.default = exports.build;
